-- Create sample tables

-- Table for Pokemon card sets
CREATE TABLE IF NOT EXISTS pokemon_sets (
    set_id INT64,
    set_name STRING,
    release_date DATE
);

-- Table for Pokemon cards
CREATE TABLE IF NOT EXISTS pokemon_cards (
    card_id INT64,
    card_name STRING,
    rarity STRING,
    type STRING,
    price NUMERIC,
    set_id INT64
);

-- Table for recording card sales
CREATE TABLE IF NOT EXISTS card_sales (
    sale_id INT64,
    card_id INT64,
    sale_date DATE,
    quantity INT64,
    total_amount NUMERIC
);

-- Insert sample data into tables

-- Insert sample data into the pokemon_sets table
INSERT INTO pokemon_sets (set_id, set_name, release_date) VALUES
(1, 'Base Set', '1999-01-09'),
(2, 'Jungle', '1999-06-16'),
(3, 'Fossil', '1999-10-10'),
(4, 'Team Rocket', '2000-04-24'),
(5, 'Neo Genesis', '2000-12-16');

-- Insert sample data into the pokemon_cards table
INSERT INTO pokemon_cards VALUES
(1, 'Charizard', 'Rare Holo', 'Fire', 500.00, 1),
(2, 'Pikachu', 'Common', 'Electric', 20.00, 1),
(3, 'Mewtwo', 'Rare Holo', 'Psychic', 300.00, 1),
(4, 'Blastoise', 'Rare Holo', 'Water', 400.00, 1),
(5, 'Rayquaza', 'Rare Holo', 'Dragon', 250.00, 1),
(6, 'Scyther', 'Rare Holo', 'Grass', 150.00, 2),
(7, 'Vaporeon', 'Rare Holo', 'Water', 200.00, 2),
(8, 'Ditto', 'Rare Holo', 'Normal', 180.00, 3),
(9, 'Dark Charizard', 'Rare Holo', 'Fire', 350.00, 4),
(10, 'Tyranitar', 'Rare Holo', 'Dark', 280.00, 4),
(11, 'Entei', 'Rare Holo', 'Fire', 220.00, 4),
(12, 'Lugia', 'Rare Holo', 'Psychic', 450.00, 5),
(13, 'Ho-Oh', 'Rare Holo', 'Fire', 400.00, 5),
(14, 'Pichu', 'Common', 'Electric', 25.00, 5);

-- Insert sample data into the card_sales table
INSERT INTO card_sales VALUES
(1, 1, '2024-04-01', 3, 1500.00),
(2, 2, '2024-04-02', 5, 100.00),
(3, 3, '2024-04-03', 2, 600.00),
(4, 4, '2024-04-04', 1, 400.00),
(5, 5, '2024-04-05', 4, 1000.00),
(6, 6, '2024-04-06', 2, 300.00),
(7, 7, '2024-04-07', 3, 600.00),
(8, 8, '2024-04-08', 1, 180.00),
(9, 9, '2024-04-09', 2, 700.00),
(10, 10, '2024-04-10', 1, 280.00),
(11, 11, '2024-04-11', 3, 660.00),
(12, 12, '2024-04-12', 2, 440.00),
(13, 13, '2024-04-13', 5, 2250.00),
(14, 14, '2024-04-14', 2, 800.00);

-- Advanced SQL Queries

-- 1. Retrieve the total sales amount for each card type and rarity
WITH sales_by_type_rarity AS (
    SELECT 
        type,
        rarity,
        SUM(total_amount) AS total_sales_amount
    FROM 
        pokemon_cards
    JOIN 
        card_sales ON pokemon_cards.card_id = card_sales.card_id
    GROUP BY 
        type, rarity
    ORDER BY 
        total_sales_amount DESC
)
SELECT * FROM sales_by_type_rarity;

-- 2. Retrieve the top-selling card in each set
WITH ranked_cards AS (
    SELECT 
        card_name,
        set_name,
        ROW_NUMBER() OVER (PARTITION BY set_name ORDER BY SUM(quantity) DESC) AS rank
    FROM 
        pokemon_cards
    JOIN 
        pokemon_sets ON pokemon_cards.set_id = pokemon_sets.set_id
    JOIN 
        card_sales ON pokemon_cards.card_id = card_sales.card_id
    GROUP BY 
        card_name, set_name
)
SELECT 
    set_name,
    card_name AS top_selling_card
FROM 
    ranked_cards
WHERE 
    rank = 1;

-- 3. Retrieve the monthly sales trend for each card rarity
WITH monthly_sales AS (
    SELECT 
        FORMAT_DATE('%Y-%m', sale_date) AS sale_month,
        rarity,
        SUM(total_amount) AS monthly_sales_amount
    FROM 
        card_sales
    JOIN 
        pokemon_cards ON card_sales.card_id = pokemon_cards.card_id
    GROUP BY 
        sale_month, rarity
)
SELECT 
    sale_month,
    rarity,
    COALESCE(monthly_sales_amount, 0) AS monthly_sales_amount
FROM 
    (SELECT DISTINCT sale_month FROM monthly_sales) months
CROSS JOIN 
    (SELECT DISTINCT rarity FROM monthly_sales) rarities
LEFT JOIN 
    monthly_sales ON months.sale_month = monthly_sales.sale_month AND rarities.rarity = monthly_sales.rarity
ORDER BY 
    sale_month, rarity;

-- 4. Retrieve cards with sales greater than the average sales quantity per set
WITH avg_sales_per_set AS (
    SELECT 
        set_id,
        AVG(quantity) AS avg_quantity_per_set
    FROM 
        pokemon_cards
    JOIN 
        card_sales ON pokemon_cards.card_id = card_sales.card_id
    GROUP BY 
        set_id
)
SELECT 
    pokemon_cards.card_name,
    card_sales.quantity,
    pokemon_sets.set_name
FROM 
    pokemon_cards
JOIN 
    card_sales ON pokemon_cards.card_id = card_sales.card_id
JOIN 
    pokemon_sets ON pokemon_cards.set_id = pokemon_sets.set_id
JOIN 
    avg_sales_per_set ON pokemon_cards.set_id = avg_sales_per_set.set_id
WHERE 
    card_sales.quantity > avg_sales_per_set.avg_quantity_per_set;

-- Statistical analysis for total sales amount by card type and rarity

WITH sales_stats AS (
    SELECT 
        type,
        rarity,
        COUNT(*) AS num_sales,                              -- Total number of sales
        SUM(total_amount) AS total_sales_amount,            -- Total sales amount
        AVG(total_amount) AS avg_sale_amount,               -- Average sales amount
        STDDEV_POP(total_amount) AS stdev_sale_amount,      -- Population standard deviation of sales amount
        STDDEV_SAMP(total_amount) AS stdev_sample_amount,  -- Sample standard deviation of sales amount
        VARIANCE_POP(total_amount) AS var_sale_amount,     -- Population variance of sales amount
        VARIANCE_SAMP(total_amount) AS var_sample_amount   -- Sample variance of sales amount
    FROM 
        pokemon_cards
    JOIN 
        card_sales ON pokemon_cards.card_id = card_sales.card_id
    GROUP BY 
        type, rarity
)
SELECT 
    type,
    rarity,
    num_sales,
    total_sales_amount,
    avg_sale_amount,
    stdev_sale_amount,
    stdev_sample_amount,
    var_sale_amount,
    var_sample_amount
FROM 
    sales_stats
ORDER BY 
    total_sales_amount DESC;

-- 5. Calculate the correlation between the price and sales quantity of cards

WITH card_price_sales AS (
    SELECT 
        pokemon_cards.card_id,
        price,
        quantity
    FROM 
        pokemon_cards
    JOIN 
        card_sales ON pokemon_cards.card_id = card_sales.card_id
)
SELECT 
    CORR(price, quantity) AS price_quantity_correlation
FROM 
    card_price_sales;
